{"version":3,"sources":["components/Meme.jsx","components/MemeGenerated.jsx","App.js","serviceWorker.js","index.js","components/styles.module.css"],"names":["Meme","useState","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","push","url","generate","skip","map","onChange","e","text","target","value","updateCaption","key","src","alt","name","MemeGenerated","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yPAIaA,EAAO,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEUF,mBAAS,GAFnB,mBAEjBG,EAFiB,KAENC,EAFM,OAGQJ,mBAAS,IAHjB,mBAGjBK,EAHiB,KAGPC,EAHO,KAMlBC,EAAUC,cA4DhB,OAhBAC,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAACC,GAC/CA,EAAIC,OAAOF,MAAK,SAACC,GACf,IAAME,EAASF,EAAIG,KAAKd,OAZT,SAACe,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,GAQTC,CAAaV,GACbZ,EAASY,WAGZ,IAEHL,qBAAU,WACJR,EAAMiB,QACRZ,EAAYmB,MAAMxB,EAAME,GAAWuB,WAAWC,KAAK,OAEpD,CAACxB,EAAWF,IAERA,EAAMiB,OACX,yBAAKU,UAAWC,IAAOC,WACrB,4BAAQC,QA/CS,WACnB,IAAMC,EAAc/B,EAAME,GACpB8B,EAAW,IAAIC,SAErBD,EAASE,OAAO,WAAY,eAC5BF,EAASE,OAAO,WAAY,mBAC5BF,EAASE,OAAO,cAAeH,EAAYI,IAC3C/B,EAASgC,SAAQ,SAACC,EAAGC,GACnBN,EAASE,OAAT,gBAAyBI,EAAzB,WAAyCD,MAE3C5B,MAAM,wCAAyC,CAC7C8B,OAAQ,OACRC,KAAMR,IACLtB,MAAK,SAACC,GACPA,EAAIC,OAAOF,MAAK,SAACC,GACfL,EAAQmC,KAAR,yBAA+B9B,EAAIG,KAAK4B,aAgCXf,UAAWC,IAAOe,UAAjD,YAGA,4BACEb,QAAS,kBAAM3B,EAAaD,EAAY,IACxCyB,UAAWC,IAAOgB,MAFpB,QAMCxC,EAASyC,KAAI,SAACR,EAAGC,GAAJ,OACZ,2BAAOQ,SAAU,SAACC,GAAD,OAtED,SAACA,EAAGT,GACxB,IAAMU,EAAOD,EAAEE,OAAOC,OAAS,GAC/B7C,EACED,EAASyC,KAAI,SAACR,EAAGrB,GACf,OAAIsB,IAAUtB,EACLgC,EAEAX,MA+Dec,CAAcJ,EAAGT,IAAQc,IAAKd,OAExD,yBAAKe,IAAKrD,EAAME,GAAWwC,IAAKY,IAAKtD,EAAME,GAAWqD,QAGxD,0C,QClFSC,EAAgB,WAAO,IAAD,EAELzD,oBAAS,GAFJ,mBAE1B0D,EAF0B,KAElBC,EAFkB,KAK3BC,EAAYC,yBACZtD,EAAUC,cACVsD,EAAWC,cACXpB,EAAM,IAAIqB,gBAAgBF,EAASG,QAAQC,IAAI,OAOrD,OACE,yBAAKtC,UAAWC,IAAOC,WACrB,4BAAQC,QAAS,kBAAMxB,EAAQmC,KAAK,MAAMd,UAAWC,IAAOsC,MAA5D,oBAGCxB,GAAO,yBAAKY,IAAI,OAAOD,IAAKX,IAC7B,4BAAQZ,QAXK,WACf6B,EAAUQ,KAAKzB,GACfgB,GAAU,IASmB/B,UAAWC,IAAOuC,MAC1CV,EAAS,eAAiB,eCLpBW,MAhBf,WACE,OACE,6BACE,4CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,UCHUC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2D,MCVNC,IAASC,OAEP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,KAAO,qBAAqB,SAAW,yBAAyB,KAAO,wB","file":"static/js/main.0ae9bfac.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Meme = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [memeIndex, setMemeIndex] = useState(0);\r\n  const [captions, setCaptions] = useState([]);\r\n  \r\n\r\n  const history = useHistory();\r\n\r\n  const updateCaption = (e, index) => {\r\n    const text = e.target.value || \"\";\r\n    setCaptions(\r\n      captions.map((c, i) => {\r\n        if (index === i) {\r\n          return text;\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const generateMeme = () => {\r\n    const currentMeme = memes[memeIndex];\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"username\", \"ricardogusi\");\r\n    formData.append(\"password\", \"fHJEJ!n66mYrSji\");\r\n    formData.append(\"template_id\", currentMeme.id);\r\n    captions.forEach((c, index) => {\r\n      formData.append(`boxes[${index}][text]`, c);\r\n    });\r\n    fetch(\"https://api.imgflip.com/caption_image\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    }).then((res) => {\r\n      res.json().then((res) => {\r\n        history.push(`/generated?url=${res.data.url}`);\r\n      });\r\n    });\r\n  };\r\n\r\n  const shuffleMemes = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\r\n      res.json().then((res) => {\r\n        const _memes = res.data.memes;\r\n        shuffleMemes(_memes);\r\n        setMemes(_memes);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (memes.length) {\r\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\r\n    }\r\n  }, [memeIndex, memes]);\r\n\r\n  return memes.length ? (\r\n    <div className={styles.container}>\r\n      <button onClick={generateMeme} className={styles.generate}>\r\n        Generate\r\n      </button>\r\n      <button\r\n        onClick={() => setMemeIndex(memeIndex + 1)}\r\n        className={styles.skip}\r\n      >\r\n        Skip\r\n      </button>\r\n      {captions.map((c, index) => (\r\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\r\n      ))}\r\n      <img src={memes[memeIndex].url} alt={memes[memeIndex].name} />\r\n    </div>\r\n  ) : (\r\n    <> </>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useClipboard } from 'use-clipboard-copy';\r\n\r\nexport const MemeGenerated = () => {\r\n  \r\n  const [copied, setCopied] = useState(false);\r\n  \r\n\r\n  const clipboard = useClipboard();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const url = new URLSearchParams(location.search).get('url');\r\n\r\n  const copyLink = () => {\r\n    clipboard.copy(url);\r\n    setCopied(true);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <button onClick={() => history.push('/')} className={styles.home}>\r\n        Make more Memes!\r\n      </button>\r\n      {url && <img alt='meme' src={url}  />}\r\n      <button onClick={copyLink} className={styles.copy}>\r\n        {copied ? 'Link copied!' : 'Copy Link'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Meme } from \"./components/Meme\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { MemeGenerated } from \"./components/MemeGenerated\";\n\n\nfunction App() {\n  return (\n    <div>\n      <h1>Meme Creator</h1>\n      <Switch>\n        <Route exact path=\"/\">\n          <Meme />\n        </Route>\n        <Route path=\"/generated\">\n          <MemeGenerated />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\n\nReactDOM.render(\n\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__30SLb\",\"skip\":\"styles_skip__1Y8GQ\",\"home\":\"styles_home__2j7j0\",\"generate\":\"styles_generate__a1QwM\",\"copy\":\"styles_copy__2jRR2\"};"],"sourceRoot":""}